// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: likes.sql

package database

import (
	"context"
	"database/sql"
)

const getLikesCount = `-- name: GetLikesCount :one
SELECT COUNT(*) AS likes_count
FROM likes
WHERE recipe_id = $1
`

func (q *Queries) GetLikesCount(ctx context.Context, recipeID sql.NullInt32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getLikesCount, recipeID)
	var likes_count int64
	err := row.Scan(&likes_count)
	return likes_count, err
}

const likeRecipe = `-- name: LikeRecipe :exec
INSERT INTO likes (user_id, recipe_id)
VALUES ($1, $2)
ON CONFLICT (user_id, recipe_id) DO NOTHING
`

type LikeRecipeParams struct {
	UserID   sql.NullInt32
	RecipeID sql.NullInt32
}

func (q *Queries) LikeRecipe(ctx context.Context, arg LikeRecipeParams) error {
	_, err := q.db.ExecContext(ctx, likeRecipe, arg.UserID, arg.RecipeID)
	return err
}

const unlikeRecipe = `-- name: UnlikeRecipe :exec
DELETE FROM likes
WHERE user_id = $1 AND recipe_id = $2
`

type UnlikeRecipeParams struct {
	UserID   sql.NullInt32
	RecipeID sql.NullInt32
}

func (q *Queries) UnlikeRecipe(ctx context.Context, arg UnlikeRecipeParams) error {
	_, err := q.db.ExecContext(ctx, unlikeRecipe, arg.UserID, arg.RecipeID)
	return err
}
