// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: recipes.sql

package database

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (user_id, title, description, tags, ingredients, instructions, total_time, difficulty, servings, photo_url)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id
`

type CreateRecipeParams struct {
	UserID       sql.NullInt32
	Title        string
	Description  sql.NullString
	Tags         []string
	Ingredients  []string
	Instructions []string
	TotalTime    sql.NullInt32
	Difficulty   sql.NullString
	Servings     sql.NullInt32
	PhotoUrl     sql.NullString
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createRecipe,
		arg.UserID,
		arg.Title,
		arg.Description,
		pq.Array(arg.Tags),
		pq.Array(arg.Ingredients),
		pq.Array(arg.Instructions),
		arg.TotalTime,
		arg.Difficulty,
		arg.Servings,
		arg.PhotoUrl,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getRecipeById = `-- name: GetRecipeById :one
SELECT
    id,
    user_id,
    title,
    description,
    tags,
    ingredients,
    instructions,
    total_time,
    difficulty,
    servings,
    photo_url,
    created_at
FROM
    recipes
WHERE
    id = $1
`

func (q *Queries) GetRecipeById(ctx context.Context, id int32) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipeById, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		pq.Array(&i.Tags),
		pq.Array(&i.Ingredients),
		pq.Array(&i.Instructions),
		&i.TotalTime,
		&i.Difficulty,
		&i.Servings,
		&i.PhotoUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getRecipes = `-- name: GetRecipes :many
SELECT
    id AS recipe_id,
    title AS recipe_name,
    description AS recipe_description,
    photo_url,
    tags
FROM
    recipes
ORDER BY
    created_at DESC
LIMIT 10 OFFSET $1
`

type GetRecipesRow struct {
	RecipeID          int32
	RecipeName        string
	RecipeDescription sql.NullString
	PhotoUrl          sql.NullString
	Tags              []string
}

func (q *Queries) GetRecipes(ctx context.Context, offset int32) ([]GetRecipesRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecipes, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecipesRow
	for rows.Next() {
		var i GetRecipesRow
		if err := rows.Scan(
			&i.RecipeID,
			&i.RecipeName,
			&i.RecipeDescription,
			&i.PhotoUrl,
			pq.Array(&i.Tags),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipesByUser = `-- name: GetRecipesByUser :many
SELECT
    id AS recipe_id,
    title AS recipe_name,
    description AS recipe_description,
    photo_url,
    tags
FROM
    recipes
WHERE
    user_id = $1
ORDER BY
    created_at DESC
`

type GetRecipesByUserRow struct {
	RecipeID          int32
	RecipeName        string
	RecipeDescription sql.NullString
	PhotoUrl          sql.NullString
	Tags              []string
}

func (q *Queries) GetRecipesByUser(ctx context.Context, userID sql.NullInt32) ([]GetRecipesByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecipesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecipesByUserRow
	for rows.Next() {
		var i GetRecipesByUserRow
		if err := rows.Scan(
			&i.RecipeID,
			&i.RecipeName,
			&i.RecipeDescription,
			&i.PhotoUrl,
			pq.Array(&i.Tags),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
