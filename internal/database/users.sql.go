// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, name, password, profile_url)
VALUES ($1, $2, $3, $4)
RETURNING id, name, email, profile_url, created_at
`

type CreateUserParams struct {
	Email      string
	Name       string
	Password   string
	ProfileUrl sql.NullString
}

type CreateUserRow struct {
	ID         int32
	Name       string
	Email      string
	ProfileUrl sql.NullString
	CreatedAt  time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Name,
		arg.Password,
		arg.ProfileUrl,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.ProfileUrl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password, profile_url, created_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.ProfileUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, profile_url, created_at
FROM users
WHERE id = $1
`

type GetUserByIDRow struct {
	ID         int32
	Name       string
	Email      string
	ProfileUrl sql.NullString
	CreatedAt  time.Time
}

func (q *Queries) GetUserByID(ctx context.Context, id int32) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.ProfileUrl,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name = COALESCE($1, email),
    profile_url = COALESCE($2, profile_url)
WHERE id = $3
`

type UpdateUserParams struct {
	Name       string
	ProfileUrl sql.NullString
	ID         int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Name, arg.ProfileUrl, arg.ID)
	return err
}
