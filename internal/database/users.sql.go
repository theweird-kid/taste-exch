// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, name, description, password, profile_url)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, email, description, profile_url, created_at
`

type CreateUserParams struct {
	Email       string
	Name        string
	Description sql.NullString
	Password    string
	ProfileUrl  sql.NullString
}

type CreateUserRow struct {
	ID          int32
	Name        string
	Email       string
	Description sql.NullString
	ProfileUrl  sql.NullString
	CreatedAt   time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Name,
		arg.Description,
		arg.Password,
		arg.ProfileUrl,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Description,
		&i.ProfileUrl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, description, password, profile_url, created_at
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID          int32
	Name        string
	Email       string
	Description sql.NullString
	Password    string
	ProfileUrl  sql.NullString
	CreatedAt   time.Time
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Description,
		&i.Password,
		&i.ProfileUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, description, profile_url, created_at
FROM users
WHERE id = $1
`

type GetUserByIDRow struct {
	ID          int32
	Name        string
	Email       string
	Description sql.NullString
	ProfileUrl  sql.NullString
	CreatedAt   time.Time
}

func (q *Queries) GetUserByID(ctx context.Context, id int32) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Description,
		&i.ProfileUrl,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name = COALESCE($1, name),
    description = COALESCE($2, description),
    profile_url = COALESCE($3, profile_url)
WHERE id = $4
`

type UpdateUserParams struct {
	Name        string
	Description sql.NullString
	ProfileUrl  sql.NullString
	ID          int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Name,
		arg.Description,
		arg.ProfileUrl,
		arg.ID,
	)
	return err
}
